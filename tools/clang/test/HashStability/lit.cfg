# -*- Python -*-

# Configuration file for the 'lit' test runner.

import os
import platform
import subprocess

import lit.formats
import lit.util

# name: The name of this test suite.
config.name = 'hash-stability'

config.excludes = ['Inputs', 'CMakeLists.txt', 'README.txt', 'LICENSE.txt',
                   'CodeCompletion',
                   'CodeGenCUDA',
                   'CodeGenSPIRV_Lit',
                   'Coverage',
                   'CoverageMapping',
                   'CXX',
                   'FixIt',
                   'Format',
                   'Frontend',
                   'HashStability',
                   'Headers',
                   'Index',
                   'Integration',
                   'Layout',
                   'Lexer',
                   'Misc',
                   'Output',
                   'Parser',
                   'PCH',
                   'PIX',
                   'Preprocessor',
                   'Profile',
                   'Sema',
                   'SemaCUDA',
                   'SemaCXX',
                   'SemaTemplate',
                   'TableGen',
                   'taef',
                   'taef_exec',
                   'Tooling',
                   'tools',
                   'Unit',
                   'VFS']

llvm_tools_dir = getattr(config, 'llvm_tools_dir', None)
if not llvm_tools_dir:
	# Check for 'clang_hash_stability_site_config' user parameter, and use that if available.
	site_cfg = lit_config.params.get('clang_hash_stability_site_config', None)
	if site_cfg and os.path.exists(site_cfg):
		lit_config.load_config(config, site_cfg)
		raise SystemExit
	lit_config.fatal('No LLVM tools dir set!')

dxc_path = lit.util.which('dxc', llvm_tools_dir)
dxa_path = lit.util.which('dxa', llvm_tools_dir)
working_dir = config.working_dir

test_path, cur_path = os.path.split(os.path.dirname(os.path.abspath(__file__)))
tmp_path = os.path.join(working_dir, 'Output')

# create tmp_path if it doesn't exist
if not os.path.exists(tmp_path):
	try:
		os.makedirs(tmp_path)
	except OSError:
		print("Creation of the directory %s for temp output failed" % tmp_path)
		raise SystemExit
hash_stability_path = lit_config.params.get('hash_stability_path', None)
if hash_stability_path:
	test_path = hash_stability_path

config.test_format = lit.formats.DxcHashTest(test_path, dxc_path, dxa_path, working_dir)

# disable spirv since it doesn't generate dxil.
if config.spirv:
    config.spirv = False

config.available_features.add("hash_stability")
